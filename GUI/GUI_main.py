# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore,QtGui,QtWidgets
import sys
import qtawesome
from gnewsclient import gnewsclient
import webbrowser

class MainUi(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setFixedSize(960, 700)
        self.main_widget = QtWidgets.QWidget()  # creat main part
        self.main_layout = QtWidgets.QGridLayout()  # creat layout
        self.main_widget.setLayout(self.main_layout)

        self.left_widget = QtWidgets.QWidget()  # creat left part
        self.left_widget.setObjectName('left_widget')
        self.left_layout = QtWidgets.QGridLayout()   # creat layout
        self.left_widget.setLayout(self.left_layout)

        self.right_widget = QtWidgets.QWidget()  # create right part
        self.right_widget.setObjectName('right_widget')
        self.right_layout = QtWidgets.QGridLayout()
        self.right_widget.setLayout(self.right_layout)

        self.main_layout.addWidget(self.left_widget, 0, 0, 12, 2)  # 左侧部件在第0行第0列，占8行3列
        self.main_layout.addWidget(self.right_widget, 0, 2, 12, 10)  # 右侧部件在第0行第3列，占8行9列
        self.setCentralWidget(self.main_widget)  # Set main part

        self.left_close = QtWidgets.QPushButton("")  # close botton
        self.left_visit = QtWidgets.QPushButton("")  # space button
        self.left_mini = QtWidgets.QPushButton("")  # min button

        self.left_label_1 = QtWidgets.QPushButton("Daily news")
        self.left_label_1.setObjectName('left_label')
        self.left_label_2 = QtWidgets.QPushButton("App functions")
        self.left_label_2.setObjectName('left_label')
        self.left_label_3 = QtWidgets.QPushButton("@Yihang")
        self.left_label_3.setObjectName('left_label')

        self.left_button_1 = QtWidgets.QPushButton(qtawesome.icon('fa.database', color='white'), "Historical data")
        self.left_button_1.setObjectName('left_button')
        self.left_button_2 = QtWidgets.QPushButton(qtawesome.icon('fa.cloud', color='white'), "Weather analysis")
        self.left_button_2.setObjectName('left_button')
        self.left_button_3 = QtWidgets.QPushButton(qtawesome.icon('fa.map', color='white'), "Local map")
        self.left_button_3.setObjectName('left_button')
        self.left_button_4 = QtWidgets.QPushButton(qtawesome.icon('fa.headphones', color='white'), "Follow US")
        self.left_button_4.setObjectName('left_button')
        self.left_button_5 = QtWidgets.QPushButton(qtawesome.icon('fa.phone', color='white'), "Report BUGs")
        self.left_button_5.setObjectName('left_button')


        self.left_layout.addWidget(self.left_mini, 0, 0, 1, 1)
        self.left_layout.addWidget(self.left_close, 0, 2, 1, 1)
        self.left_layout.addWidget(self.left_visit, 0, 1, 1, 1)
        self.left_layout.addWidget(self.left_label_1, 1, 0, 1, 3)
        self.left_layout.addWidget(self.left_label_2, 2, 0, 1, 3)
        self.left_layout.addWidget(self.left_button_1, 3, 0, 1, 3)
        self.left_layout.addWidget(self.left_button_2, 4, 0, 1, 3)
        self.left_layout.addWidget(self.left_button_3, 5, 0, 1, 3)
        self.left_layout.addWidget(self.left_button_4, 6, 0, 1, 3)
        self.left_layout.addWidget(self.left_button_5, 8, 0, 1, 3)
        self.left_layout.addWidget(self.left_label_3, 7, 0, 1, 3)

        ##button for hostorical data
        self.right_recommend_label = QtWidgets.QLabel("historical data")
        self.right_recommend_label.setObjectName('right_lable')

        self.right_recommend_widget = QtWidgets.QWidget()
        self.right_recommend_layout = QtWidgets.QGridLayout()
        self.right_recommend_widget.setLayout(self.right_recommend_layout)

        self.recommend_button_1 = QtWidgets.QToolButton()
        self.recommend_button_1.setText("Humidity")
        self.recommend_button_1.setIcon(QtGui.QIcon('./r1.jpg'))
        self.recommend_button_1.setIconSize(QtCore.QSize(200, 200))
        self.recommend_button_1.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)

        self.recommend_button_2 = QtWidgets.QToolButton()
        self.recommend_button_2.setText("Tem")
        self.recommend_button_2.setIcon(QtGui.QIcon('./r2.jpg'))
        self.recommend_button_2.setIconSize(QtCore.QSize(200, 200))
        self.recommend_button_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)

        self.recommend_button_3 = QtWidgets.QToolButton()
        self.recommend_button_3.setText("WindSpeed")
        self.recommend_button_3.setIcon(QtGui.QIcon('./r3.jpg'))
        self.recommend_button_3.setIconSize(QtCore.QSize(200, 200))
        self.recommend_button_3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)

        self.right_recommend_layout.addWidget(self.recommend_button_1, 0, 0)
        self.right_recommend_layout.addWidget(self.recommend_button_2, 0, 1)
        self.right_recommend_layout.addWidget(self.recommend_button_3, 0, 2)

        self.right_layout.addWidget(self.right_recommend_label, 1, 0, 1, 9)
        self.right_layout.addWidget(self.right_recommend_widget, 2, 0, 2, 9)

        self.right_newsong_lable = QtWidgets.QLabel("Local News")
        self.right_newsong_lable.setObjectName('right_lable')

        self.right_playlist_lable = QtWidgets.QLabel("Real-time weather")
        self.right_playlist_lable.setObjectName('right_lable')

        self.right_newsong_widget = QtWidgets.QWidget()  # Local news part
        self.right_newsong_layout = QtWidgets.QGridLayout()
        self.right_newsong_widget.setLayout(self.right_newsong_layout)

        self.news_button_1 = QtWidgets.QPushButton("refresh")
        self.news_button_2 = QtWidgets.QPushButton()
        self.news_button_3 = QtWidgets.QPushButton()
        self.news_button_4 = QtWidgets.QPushButton()
        self.news_button_5 = QtWidgets.QPushButton()

        self.news_button_1.clicked.connect(lambda: self.update_news(1))
        self.news_button_2.clicked.connect(lambda: self.open_link(2))
        self.news_button_3.clicked.connect(lambda: self.open_link(3))
        self.news_button_4.clicked.connect(lambda: self.open_link(4))
        self.news_button_5.clicked.connect(lambda: self.open_link(5))

        self.right_newsong_layout.addWidget(self.news_button_1, 0, 1, )
        self.right_newsong_layout.addWidget(self.news_button_2, 1, 1, )
        self.right_newsong_layout.addWidget(self.news_button_3, 2, 1, )
        self.right_newsong_layout.addWidget(self.news_button_4, 3, 1, )
        self.right_newsong_layout.addWidget(self.news_button_5, 4, 1, )

        ##function
        self.right_function_widget = QtWidgets.QWidget()  # function part
        self.right_function_layout = QtWidgets.QGridLayout()
        self.right_function_widget.setLayout(self.right_function_layout)

        self.function_button_1 = QtWidgets.QToolButton()
        self.function_button_1.setText("real_time…")
        self.function_button_1.setIcon(QtGui.QIcon('./p1.jpg'))
        self.function_button_1.setIconSize(QtCore.QSize(200, 200))
        self.function_button_1.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)

        self.function_button_2 = QtWidgets.QToolButton()
        self.function_button_2.setText("map display")
        self.function_button_2.setIcon(QtGui.QIcon('./p2.jpg'))
        self.function_button_2.setIconSize(QtCore.QSize(200, 200))
        self.function_button_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)



        self.right_function_layout.addWidget(self.function_button_1, 0, 0)
        self.right_function_layout.addWidget(self.function_button_2, 0, 1)

        self.right_layout.addWidget(self.right_newsong_lable, 4, 0, 1, 5)
        self.right_layout.addWidget(self.right_playlist_lable, 4, 5, 1, 4)
        self.right_layout.addWidget(self.right_newsong_widget, 5, 0, 1, 5)
        self.right_layout.addWidget(self.right_function_widget, 5, 5, 1, 4)

        ## QSS
        self.left_close.setFixedSize(30, 30)  # set size
        self.left_visit.setFixedSize(30, 30)  # set size
        self.left_mini.setFixedSize(30, 30)  # set size

        self.left_close.setStyleSheet(
            '''QPushButton{background:#F76677;border-radius:5px;}QPushButton:hover{background:red;}''')
        self.left_visit.setStyleSheet(
            '''QPushButton{background:#F7D674;border-radius:5px;}QPushButton:hover{background:yellow;}''')
        self.left_mini.setStyleSheet(
            '''QPushButton{background:#6DDF6D;border-radius:5px;}QPushButton:hover{background:green;}''')

        self.left_widget.setStyleSheet('''
            QPushButton{border:none;color:white;}
            QPushButton#left_label{
                border:none;
                border-bottom:1px solid white;
                font-size:18px;
                font-weight:700;
                font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            }
            QPushButton#left_button:hover{border-left:4px solid red;font-weight:700;}
        ''')

        self.right_widget.setStyleSheet('''
            QWidget#right_widget{
                color:#232C51;
                background:white;
                border-top:1px solid darkGray;
                border-bottom:1px solid darkGray;
                border-right:1px solid darkGray;
                border-top-right-radius:10px;
                border-bottom-right-radius:10px;
            }
            QLabel#right_lable{
                border:none;
                font-size:16px;
                font-weight:700;
                font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            }
        ''')
        self.right_recommend_widget.setStyleSheet(
            '''
                QToolButton{border:none;}
                QToolButton:hover{border-bottom:2px solid #F76677;}
            ''')
        self.right_function_widget.setStyleSheet(
            '''
                QToolButton{border:none;}
                QToolButton:hover{border-bottom:2px solid #F76677;}
            ''')
        self.right_newsong_widget.setStyleSheet('''
            QPushButton{
                border:none;
                color:gray;
                font-size:12px;
                height:40px;
                padding-left:5px;
                padding-right:10px;
                text-align:left;
            }
            QPushButton:hover{
                color:black;
                border:1px solid #F3F3F5;
                border-radius:10px;
                background:LightGray;
            }
        ''')
        self.setWindowOpacity(0.9)  # set transparent
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # set transparent


        #quit function
        self.left_close.clicked.connect(lambda: self.__exit__(1))


    def update_news(self, button_number):
        # use gnewsclient get news
        client = gnewsclient.NewsClient(language='swedish', location='Sweden', topic='World', max_results=5)
        news_list = client.get_news()

        # get botton
        button = getattr(self, f'news_button_{button_number}')

        # refresh label
        for idx, item in enumerate(news_list):
            if idx == button_number - 1:
                # 1 will not change
                if button_number != 1:
                    button.setText(item['title'])
                break

            # press 1 refresh 2-5
        if button_number == 1:
            for i in range(2, 6):
                self.update_news(i)

    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.exit(self.exec_())

    

    def open_link(self, button_number):
        # use gnewsclient news
        client = gnewsclient.NewsClient(language='swedish', location='Sweden', topic='World', max_results=5)
        news_list = client.get_news()

        # get button
        button = getattr(self, f'news_button_{button_number}')

        # get link
        link_text = news_list[button_number - 1]['link']
        webbrowser.open(link_text)

def main():
    app = QtWidgets.QApplication(sys.argv)
    gui = MainUi()
    gui.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()